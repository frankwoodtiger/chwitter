# @maven.activeProfile@ is a placeholder for Maven substitute the value.
# maven.activeProfile is a custom key we use but it can be anything as long as it matches the one in pom.xml
# Whem using maven, to activate prod, run 'mvn clean package -Pprod'
spring.profiles.active=@maven.activeProfile@

spring.mvc.view.prefix=/WEB-INF/jsp/pages/
spring.mvc.view.suffix=.jsp

# override the default spring security user and password
# spring.security.user.name=chi
# spring.security.user.password=1234

# ------------- Database settings -------------
# Enabling H2 Console, http://localhost:8080/h2-console.
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=chi
spring.datasource.password=5201314Twitter
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# for data-${platform}.sql
spring.datasource.platform=h2

# If you are talking to an in memory db, by default, it looks at the entities and creates the database and the tables.
# However, if you connect to a mysql database, Spring Boot knows that its a permanent database. By default, it expects
# you to set up the database, set up the tables and it uses the connection that you established.
spring.jpa.hibernate.ddl-auto=create-drop
# Spring Boot chooses a default value for you based on whether it thinks your database is embedded (default: create-drop) or not (default: none).
# An embedded database is detected by looking at the Connection type: hsqldb, h2 and derby are embedded, the rest are not.
# Be careful when switching from in-memory to a ¡§real¡¨ database that you don¡¦t make assumptions about the existence of
# the tables and data in the new platform. You either have to set ddl-auto explicitly, or use one of the other mechanisms
# to initialize the database.
# none: No change is made to the database structure.
# update: Hibernate changes the database according to the given entity structures but it does not remove old columns/contraints.
# create: Creates the database every time but does not drop it on close.
# create-drop: Creates the database and drops it when SessionFactory closes. Mainly used for development

# Spring JDBC has a DataSource initializer feature. Spring Boot enables it by default and loads SQL from the standard
# locations schema.sql and data.sql (in the root of the classpath). In addition Spring Boot will load a file
# schema-${platform}.sql where platform is the value of spring.datasource.platform, e.g. you might choose to set it to
# the vendor name of the database (hsqldb, h2, oracle, mysql, postgresql etc.). Spring Boot enables the failfast feature
# of the Spring JDBC initializer by default, so if the scripts cause exceptions the application will fail to start.

hibernate.show_sql=true
# ----------- Database settings END -----------

# Adding this entry to the application.properties file will disable the error page and show a concise page that
# originates from the underlying application container, e.g., Tomcat.
server.error.whitelabel.enabled=false